<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jiaoke.quality.dao.QualityMatchingDao">
    <select id="selectMatchingMoudelByLimte"  resultType="com.jiaoke.quality.bean.QualityRatioModel">

        SELECT
               QPM.id,
               QPM.message_id AS messageId,
               QPM.model_name AS modelName,
               QPM.create_time AS createTime,
               QPM.remaker AS remaker,
               QPM.create_user AS createUser,
               QPMS.crew1_modele_id AS crew1Id,
               QPMS.crew2_modele_id AS crew2Id
        FROM
             quality_proportioning_model AS QPM
                 INNER JOIN quality_proportioning_message AS QPMS ON QPM.message_id = QPMS.id
        WHERE YEAR(QPM.create_time) = YEAR(NOW())
        ORDER BY QPMS.id DESC
        limit #{startLineNum},#{endLineNum};
    </select>

    <select id="selectRationYear" resultType="java.util.Map">
        SELECT
               YEAR(QPM.create_time) AS `year`
        FROM
             quality_proportioning_model AS QPM
                 INNER JOIN quality_proportioning_message AS QPMS ON QPM.message_id = QPMS.id
        WHERE YEAR(QPM.create_time) != YEAR(NOW())
        GROUP BY YEAR(QPM.create_time)
    </select>
    <select id="selectAllRation" resultType="com.jiaoke.quality.bean.QualityRatioModel">
        SELECT
               QPM.id,
               QPM.message_id AS messageId,
               QPM.model_name AS modelName,
               QPM.create_time AS createTime,
               QPM.remaker AS remaker,
               QPM.create_user AS createUser,
               QPMS.crew1_modele_id AS crew1Id,
               QPMS.crew2_modele_id AS crew2Id
        FROM
             quality_proportioning_model AS QPM
                 INNER JOIN quality_proportioning_message AS QPMS ON QPM.message_id = QPMS.id
        where YEAR(QPM.create_time) != YEAR(NOW())
        ORDER BY QPMS.id DESC
    </select>
    <!--start-->
    <select id="selectMatchingMoudelDataCount" resultType="int" >
        SELECT
               COUNT(*)
        FROM
             quality_proportioning_model AS QPM
                 INNER JOIN quality_proportioning_message AS QPMS ON QPM.message_id = QPMS.id
        where  YEAR(QPM.create_time) = YEAR(NOW())
    </select>
    <!--end-->
    
    <!--start-->
    <select id="selectRegenerateTypeList" resultType="java.util.Map">
        select * from quality_proportioning_regenerate;
    </select>
    <!--end-->

    <!--start-->
    <select id="selectAdditiveTypeList" resultType="java.util.Map">
        select * from quality_proportioning_additive;
    </select>
    <!--end-->

    <!--start-->
    <insert id="insetRatioTemplate" useGeneratedKeys="true" keyProperty="id"  parameterType="com.jiaoke.quality.bean.QualityRatioTemplate">

        INSERT INTO quality_proportioning_message (
                pro_name,
                repertory_one,
                repertory_two,
                repertory_three,
                repertory_four,
                repertory_five,
                repertory_six,
                breeze,
                ratio_stone,
                ratio_regenerate1,
                ratio_regenerate2,
                ratio_additive,
                regenerate,
                additive,
                temperature_asphalt,
                temperature_asphalt_up,
                temperature_aggregate,
                temperature_aggregate_up,
                temperature_mixture,
                temperature_mixture_up,
                temperature_milling,
                temperature_milling_up,
                crew1_modele_id,
                crew2_modele_id
                )
        VALUES
               (
                       #{proName},
                       #{repertoryOne},
                       #{repertoryTwo},
                       #{repertoryThree},
                       #{repertoryFour},
                       #{repertoryFive},
                       #{repertorySix},
                       #{breeze},
                       #{ratioStone},
                       #{ratioRegenerate1},
                       #{ratioRegenerate2},
                       #{ratioAdditive},
                       #{regenerate},
                       #{additive},
                       #{temperatureAsphalt},
                       #{temperatureAsphaltUp},
                       #{temperatureAggregate},
                       #{temperatureAggregateUp},
                       #{temperatureMixture},
                       #{temperatureMixtureUp},
                       #{temperatureMilling},
                       #{temperatureMillingUp},
                       #{crew1ModeleId},
                       #{crew2ModeleId})
    </insert>
    <!--end-->


    <!--Start-->

    <insert id="insertRationCreateMessage" parameterType="java.util.Map">
        <selectKey resultType="int" order="AFTER" keyProperty="id">
            SELECT LAST_INSERT_ID() as id
        </selectKey>
        INSERT INTO quality_proportioning_model (
                message_id,
                model_name,
                create_time,
                remaker,
                create_user
                )
        VALUES
               (#{map.messageId},
                       #{map.modelName},
                       #{map.createTime},
                       #{map.remaker},
                       #{map.createUser})
    </insert>

    <delete id="delectRation"  >

        DELETE  t1.*,t2.*
        FROM
        quality_proportioning_model AS t1
        INNER JOIN quality_proportioning_message AS t2 ON t1.message_id = t2.id
        where t1.message_id in
        <foreach collection="idArray" open="(" separator="," close=")" item="id">
            #{id}
        </foreach>

    </delete>

    <select id="selectRationById" resultType="com.jiaoke.quality.bean.QualityRatioTemplate">
        SELECT
               t1.id,
               t1.pro_name AS proName,
               t1.repertory_one AS repertoryOne,
               t1.repertory_two AS repertoryTwo,
               t1.repertory_three AS repertoryThree,
               t1.repertory_four AS repertoryFour,
               t1.repertory_five AS repertoryFive,
               t1.repertory_six AS repertorySix,
               t1.breeze AS breeze,
               t1.ratio_stone AS ratioStone,
               t1.ratio_regenerate1 AS ratioRegenerate1,
               t1.ratio_regenerate2 AS ratioRegenerate2,
               t1.ratio_additive AS ratioAdditive,
               t1.temperature_asphalt AS temperatureAsphalt,
               t1.temperature_asphalt_up AS temperatureAsphaltUp,
                t1.temperature_aggregate as temperatureAggregate,
               t1.temperature_aggregate_up as temperatureAggregateUp,
               t1.temperature_mixture AS temperatureMixture,
               t1.temperature_mixture_up as temperatureMixtureUp,
               t1.temperature_milling AS temperatureMilling,
               t1.temperature_milling_up AS temperatureMillingUp,
               t1.crew1_modele_id AS crew1ModeleId,
               t1.crew2_modele_id AS crew2ModeleId,
               t2.create_user AS upUser,
               t2.remaker AS remark
        FROM
             quality_proportioning_message AS t1
                 INNER JOIN quality_proportioning_model AS t2 ON t1.id = t2.message_id
        WHERE
                t1.id = #{idStr}
    </select>

    <insert id="insetGrading" parameterType="java.util.Map">
        INSERT INTO quality_proportioning_grading (
                crew1_id,
                crew2_id,
                sieve_diameter_grading,
                repertory_six_grading,
                repertory_five_grading,
                repertory_four_grading,
                repertory_three_grading,
                repertory_two_grading,
                repertory_one_grading,
                breeze_grading,
                rough_regenerate_grading,
                thin_regenerate_grading,
                additive_grading,
                synthesis_grading,
                mid_value,
                up_value,
                down_value,
                model_id
                )
        values
                  <foreach collection ="list" item="list" index= "index" separator =",">
                       (
                        #{list.crew1_id}, #{list.crew2_id},#{list.sieve_pore}, #{list.six_warehouse},
                      #{list.five_warehouse}, #{list.four_warehouse},#{list.three_warehouse}, #{list.two_warehouse},
                      #{list.one_warehouse}, #{list.breeze_grading},#{list.rough_regenerate}, #{list.thin_regenerate},
                      #{list.additive_aggregate}, #{list.compound_grading},#{list.mid_value}, #{list.up_value}, #{list.down_value},#{id}
                        )
                  </foreach >
    </insert>

    <update id="updateRatioById" parameterType="com.jiaoke.quality.bean.QualityRatioTemplate" >
        UPDATE quality_proportioning_message  AS QPM
        LEFT JOIN quality_proportioning_model AS QPO
        ON QPM.id = QPO.message_id
        SET
            QPO.model_name = #{ratioTemplate.proName},
            QPO.remaker = #{ratioTemplate.remark},
            QPO.create_user = #{ratioTemplate.upUser},
            QPM.pro_name = #{ratioTemplate.proName},
            QPM.repertory_one = #{ratioTemplate.repertoryOne},
            QPM.repertory_two = #{ratioTemplate.repertoryTwo},
            QPM.repertory_three =#{ratioTemplate.repertoryThree},
            QPM.repertory_four = #{ratioTemplate.repertoryFour},
            QPM.repertory_five = #{ratioTemplate.repertoryFive},
            QPM.repertory_six = #{ratioTemplate.repertorySix},
            QPM.breeze = #{ratioTemplate.breeze},
            QPM.ratio_stone = #{ratioTemplate.ratioStone},
            QPM.ratio_regenerate1 = #{ratioTemplate.ratioRegenerate1},
            QPM.ratio_regenerate2 = #{ratioTemplate.ratioRegenerate2},
            QPM.ratio_additive = #{ratioTemplate.ratioAdditive},
            QPM.regenerate = #{ratioTemplate.regenerate},
            QPM.additive = #{ratioTemplate.additive},
            QPM.temperature_asphalt = #{ratioTemplate.temperatureAsphalt},
            QPM.temperature_asphalt_up = #{ratioTemplate.temperatureAsphaltUp},
            QPM.temperature_aggregate = #{ratioTemplate.temperatureAggregate},
            QPM.temperature_aggregate_up = #{ratioTemplate.temperatureAggregateUp},
            QPM.temperature_mixture = #{ratioTemplate.temperatureMixture},
            QPM.temperature_mixture_up = #{ratioTemplate.temperatureMixtureUp},
            QPM.temperature_milling = #{ratioTemplate.temperatureMilling},
            QPM.temperature_milling_up = #{ratioTemplate.temperatureMillingUp},
            QPM.crew1_modele_id =#{ratioTemplate.crew1ModeleId},
            QPM.crew2_modele_id = #{ratioTemplate.crew2ModeleId}
        WHERE QPM.id = #{ratioTemplate.id}
    </update>

    <insert id="insetGradingModel" parameterType="java.util.Map" useGeneratedKeys="true" keyProperty="id" keyColumn="id">

        INSERT INTO quality_proportioning_grading_model (
                grading_name,
                create_time,
                grading_remaker,
                up_user
                )
        VALUES
               (#{map.gradingName},#{map.date},#{map.gradingRemaker},#{map.upUser})

        <selectKey  resultType="java.lang.Integer"  order="AFTER" keyProperty="map.id">
            SELECT LAST_INSERT_ID() as id
        </selectKey>
    </insert>

    <select id="selectGradingYear" resultType="java.util.Map">
        SELECT
               YEAR(QPM.create_time) AS `year`
        FROM
             quality_proportioning_grading_model AS QPM
                 INNER JOIN quality_proportioning_grading AS QPMS ON QPM.id = QPMS.model_id
        WHERE YEAR(QPM.create_time) != YEAR(NOW())
        GROUP BY YEAR(QPM.create_time)
    </select>
    <select id="selectAllGrading" resultType="java.util.Map">
        SELECT
               QPGM.id,
               QPG.crew1_id AS crew1Id,
               QPG.crew2_id AS crew2Id,
               QPGM.grading_name,
               DATE_FORMAT(QPGM.create_time, '%Y-%m-%d') AS create_time,
               QPGM.grading_remaker,
               QPGM.up_user
        FROM
             quality_proportioning_grading_model AS QPGM
                 INNER JOIN quality_proportioning_grading AS QPG ON QPGM.id = QPG.model_id
        where YEAR(QPGM.create_time) != YEAR(NOW())
        GROUP BY QPGM.id
    </select>
</mapper>