<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jiaoke.quality.dao.QualityMatchingDao">
    <select id="selectMatchingMoudelByLimte"  resultType="com.jiaoke.quality.bean.QualityRatioModel">
        select  id,message_id as messageId,  model_name as modelName , create_time as createTime , remaker as remaker  ,create_user as createUser
        from quality_proportioning_model
        limit #{startLineNum},#{endLineNum};
    </select>
    <!--start-->
    <select id="selectMatchingMoudelDataCount" resultType="int" >
        select  count(*) from quality_proportioning_model;
    </select>
    <!--end-->
    
    <!--start-->
    <select id="selectRegenerateTypeList" resultType="java.util.Map">
        select * from quality_proportioning_regenerate;
    </select>
    <!--end-->

    <!--start-->
    <select id="selectAdditiveTypeList" resultType="java.util.Map">
        select * from quality_proportioning_additive;
    </select>
    <!--end-->

    <!--start-->
    <insert id="insetRatioTemplate" useGeneratedKeys="true" keyProperty="id"  parameterType="com.jiaoke.quality.bean.QualityRatioTemplate">

        INSERT INTO quality_proportioning_message (
                pro_name,
                repertory_one,
                repertory_two,
                repertory_three,
                repertory_four,
                repertory_five,
                repertory_six,
                breeze,
                ratio_stone,
                ratio_regenerate1,
                ratio_regenerate2,
                ratio_additive,
                regenerate,
                additive,
                temperature_asphalt,
                temperature_asphalt_up,
                temperature_aggregate,
                temperature_aggregate_up,
                temperature_mixture,
                temperature_mixture_up,
                temperature_milling,
                temperature_milling_up,
                crew1_modele_id,
                crew2_modele_id
                )
        VALUES
               (
                       #{proName},
                       #{repertoryOne},
                       #{repertoryTwo},
                       #{repertoryThree},
                       #{repertoryFour},
                       #{repertoryFive},
                       #{repertorySix},
                       #{breeze},
                       #{ratioStone},
                       #{ratioRegenerate1},
                       #{ratioRegenerate2},
                       #{ratioAdditive},
                       #{regenerate},
                       #{additive},
                       #{temperatureAsphalt},
                       #{temperatureAsphaltUp},
                       #{temperatureAggregate},
                       #{temperatureAggregateUp},
                       #{temperatureMixture},
                       #{temperatureMixtureUp},
                       #{temperatureMilling},
                       #{temperatureMillingUp},
                       #{crew1ModeleId},
                       #{crew2ModeleId})
    </insert>
    <!--end-->


    <!--Start-->

    <insert id="insertRationCreateMessage" parameterType="java.util.Map">
        <selectKey resultType="int" order="AFTER" keyProperty="id">
            SELECT LAST_INSERT_ID() as id
        </selectKey>
        INSERT INTO quality_proportioning_model (
                message_id,
                model_name,
                create_time,
                remaker,
                create_user
                )
        VALUES
               (#{map.messageId},
                       #{map.modelName},
                       #{map.createTime},
                       #{map.remaker},
                       #{map.createUser})
    </insert>

    <delete id="delectRation"  >

        DELETE  t1.*,t2.*
        FROM
        quality_proportioning_model AS t1
        INNER JOIN quality_proportioning_message AS t2 ON t1.message_id = t2.id
        where t1.message_id in
        <foreach collection="idArray" open="(" separator="," close=")" item="id">
            #{id}
        </foreach>

    </delete>

    <select id="selectRationById" resultType="com.jiaoke.quality.bean.QualityRatioTemplate">
        SELECT
               t1.id,
               t1.pro_name AS proName,
               t1.repertory_one AS repertoryOne,
               t1.repertory_two AS repertoryTwo,
               t1.repertory_three AS repertoryThree,
               t1.repertory_four AS repertoryFour,
               t1.repertory_five AS repertoryFive,
               t1.repertory_six AS repertorySix,
               t1.breeze AS breeze,
               t1.ratio_stone AS ratioStone,
               t1.ratio_regenerate1 AS ratioRegenerate1,
               t1.ratio_regenerate2 AS ratioRegenerate2,
               t1.ratio_additive AS ratioAdditive,
               t1.temperature_asphalt AS temperatureAsphalt,
               t1.temperature_asphalt AS temperatureAggregate,
               t1.temperature_mixture AS temperatureMixture,
               t1.temperature_milling AS temperatureMilling,
               t1.crew1_modele_id AS crew1ModeleId,
               t1.crew2_modele_id AS crew2ModeleId,
               t2.create_user AS upUser,
               t2.remaker AS remark
        FROM
             quality_proportioning_message AS t1
                 INNER JOIN quality_proportioning_model AS t2 ON t1.id = t2.message_id
        WHERE
                t1.id = #{idStr}
    </select>

    <insert id="insetGrading" parameterType="java.util.Map">
        INSERT INTO quality_proportioning_grading (
                crew1_id,
                crew2_id,
                sieve_diameter_grading,
                repertory_six_grading,
                repertory_five_grading,
                repertory_four_grading,
                repertory_three_grading,
                repertory_two_grading,
                repertory_one_grading,
                breeze_grading,
                rough_regenerate_grading,
                thin_regenerate_grading,
                additive_grading,
                synthesis_grading,
                mid_value,
                up_value,
                down_value
                )
        values
                  <foreach collection ="list" item="list" index= "index" separator =",">
                       (
                        #{list.crew1_id}, #{list.crew2_id},#{list.sieve_pore}, #{list.six_warehouse},
                      #{list.five_warehouse}, #{list.four_warehouse},#{list.three_warehouse}, #{list.two_warehouse},
                      #{list.one_warehouse}, #{list.breeze_grading},#{list.rough_regenerate}, #{list.thin_regenerate},
                      #{list.additive_aggregate}, #{list.compound_grading},#{list.mid_value}, #{list.up_value}, #{list.down_value}
                        )
                  </foreach >
    </insert>

</mapper>