<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jiaoke.quality.dao.QualityWarningDao">

    <insert id="insertQualityWarningCrew" parameterType="java.util.Map"  keyProperty="id" keyColumn="id" useGeneratedKeys="true">
        <selectKey resultType="String" order="AFTER" keyProperty="id">
            SELECT LAST_INSERT_ID() as id
        </selectKey>
        insert into quality_warning_promessage_crew(produce_date,
                                                            produce_time,
                                                            produce_ratio_id,
                                                            produce_car_num,
                                                            produce_disc_num,
                                                            produce_user,
                                                            produce_custom_num,
                                                            produce_crewNum)
                  values (#{produce_date},
                            #{produce_time},
                            #{produce_ratio_id},
                            #{produce_car_num},
                            #{produce_disc_num},
                            #{produce_user},
                            #{produce_custom_num},
                            #{produce_crewNum})
    </insert>

    <select id="selectRatioTemplateByCrew1MoudelId" resultType="com.jiaoke.quality.bean.QualityRatioTemplate" statementType="STATEMENT" >
        select QPM.id,
               QPM.pro_name as proName,
               QPM.repertory_one as repertoryOne,
               QPM.repertory_two as repertoryTwo,
               QPM.repertory_three as repertoryThree,
               QPM.repertory_four as repertoryFour,
               QPM.repertory_five as repertoryFive,
               QPM.repertory_six as repertorySix,
               QPM.repertory_seven as repertorySeven,
               QPM.repertory_eight as repertoryEight,
               QPM.repertory_nine as repertoryNine,
               QPM.repertory_ten as repertoryTen,
               QPM.breeze as breeze,
               QPM.breeze_two as breezeTwo,
               QPM.breeze_three as breezeThree,
               QPM.breeze_four as breezeFour,
               QPM.ratio_stone as ratioStone,
               QPM.ratio_regenerate1 as ratioRegenerate1,
               QPM.ratio_regenerate2 as ratioRegenerate2,
               QPM.ratio_regenerate3 as ratioRegenerate3,
               QPM.ratio_additive as ratioAdditive,
               QPM.ratio_additive_two as ratioAdditiveTwo,
               QPM.ratio_additive_three as ratioAdditiveThree,
               QPM.ratio_additive_four as ratioAdditiveFour,
               QPM.temperature_asphalt as temperatureAsphalt,
               QPM.temperature_aggregate as temperatureAggregate,
               QPM.temperature_mixture as temperatureMixture,
               QPM.temperature_milling as temperatureMilling,
               QPM.temperature_asphalt_up as temperatureAsphaltUp,
               QPM.temperature_aggregate_up as temperatureAggregateUp,
               QPM.temperature_mixture_up as temperatureMixtureUp,
               QPM.temperature_milling_up as temperatureMillingUp
        from quality_proportioning_message AS QPM
        where ${columeName} = ${crewMoudelId}
        AND YEAR(QPM.create_time) = YEAR(&apos;${proDate}&apos;)

    </select>
    
    <insert id="insertQualityWarningData" parameterType="java.util.List" useGeneratedKeys="false" >

            insert into quality_warning_data
            (crew_id,material_name,actual_ratio,moudle_ratio,deviation_ratio,warning_level,crew_num )
            values
            <foreach collection="warningDataList" item="item" index="index" separator=",">
                (
                #{item.crewId},
                #{item.materialName},
                #{item.actualRatio},
                #{item.moudleRatio},
                #{item.deviationRatio},
                #{item.warningLevel},
                #{crewNum}
                )
            </foreach>
    </insert>

    <select id="getQualityRatioTemplateById" parameterType="java.lang.Integer" resultType="com.jiaoke.quality.bean.QualityRatioTemplate">
        select QPM.id,
               QPM.pro_name as proName,
               QPM.repertory_one as repertoryOne,
               QPM.repertory_two as repertoryTwo,
               QPM.repertory_three as repertoryThree,
               QPM.repertory_four as repertoryFour,
               QPM.repertory_five as repertoryFive,
               QPM.repertory_six as repertorySix,
               QPM.repertory_seven as repertorySeven,
               QPM.repertory_eight as repertoryEight,
               QPM.repertory_nine as repertoryNine,
               QPM.repertory_ten as repertoryTen,
               QPM.breeze as breeze,
               QPM.breeze_two as breezeTwo,
               QPM.breeze_three as breezeThree,
               QPM.breeze_four as breezeFour,
               QPM.ratio_stone as ratioStone,
               QPM.ratio_regenerate1 as ratioRegenerate1,
               QPM.ratio_regenerate2 as ratioRegenerate2,
               QPM.ratio_regenerate3 as ratioRegenerate3,
               QPM.ratio_additive as ratioAdditive,
               QPM.ratio_additive_two as ratioAdditiveTwo,
               QPM.ratio_additive_three as ratioAdditiveThree,
               QPM.ratio_additive_four as ratioAdditiveFour,
               QPM.temperature_asphalt as temperatureAsphalt,
               QPM.temperature_aggregate as temperatureAggregate,
               QPM.temperature_mixture as temperatureMixture,
               QPM.temperature_milling as temperatureMilling,
               QPM.temperature_asphalt_up as temperatureAsphaltUp,
               QPM.temperature_aggregate_up as temperatureAggregateUp,
               QPM.temperature_mixture_up as temperatureMixtureUp,
               QPM.temperature_milling_up as temperatureMillingUp
        from quality_proportioning_message AS QPM
        where ${crewNum}_modele_id = ${id}
          AND YEAR(QPM.create_time) = YEAR(&apos;${proDate}&apos;)

    </select>
    
    <insert id="insertCriticalWarning" useGeneratedKeys="true">
        INSERT INTO quality_critical_warning (warning_crew_id)
        VALUES
               (#{id})
    </insert>
    <select id="selectWarningLevel" resultType="java.util.Map">
        SELECT * FROM `quality_warning_level`;
    </select>
    <update id="updateQualityWarningData" >
        UPDATE quality_warning_promessage_crew
        SET max_warning_level = #{upWarning},
            core_warning_level = #{criticalWarning},
            pro_name = #{proName}
        WHERE
                id = #{id}
    </update>
    <select id="selectWarningLevelByRatioId" resultType="java.util.Map">
        SELECT * FROM quality_warning_dictionary WHERE ration_id = #{ratioId}
    </select>
    <select id="selectLastProductTime" resultType="java.util.Map">
            SELECT
            MAX(STR_TO_DATE(concat(produce_date,' ',produce_time),'%Y-%m-%d %H:%i:%s')) AS lastTime
            FROM
            quality_monitoring_realtime_data${crewNum}
            WHERE
            STR_TO_DATE(concat(produce_date,' ',produce_time),'%Y-%m-%d %H:%i:%s') &lt;=  &apos;${produceTime}&apos;
    </select>
    <select id="selectThreeProductByTime" resultType="java.util.Map">
        <choose>
            <when test= 'crewNum == "1"'>
                SELECT
                *
                FROM
                quality_monitoring_realtime_data1
                WHERE
                STR_TO_DATE(concat(produce_date,' ',produce_time),'%Y-%m-%d %H:%i:%s') BETWEEN DATE_SUB(#{productTime}, INTERVAL 30 MINUTE) AND #{productTime}
                AND
                produce_proportioning_num =  #{rationNum}
                ORDER BY STR_TO_DATE(concat(produce_date,' ',produce_time),'%Y-%m-%d %H:%i:%s') DESC
                LIMIT 3
            </when>
            <otherwise>
                SELECT
                *
                FROM
                quality_monitoring_realtime_data2
                WHERE
                STR_TO_DATE(concat(produce_date,' ',produce_time),'%Y-%m-%d %H:%i:%s') BETWEEN DATE_SUB(#{productTime}, INTERVAL 30 MINUTE) AND #{productTime}
                AND
                produce_proportioning_num = #{rationNum}
                ORDER BY STR_TO_DATE(concat(produce_date,' ',produce_time),'%Y-%m-%d %H:%i:%s') DESC
                LIMIT 3
            </otherwise>
        </choose>

    </select>
    <select id="selectProductionPeople" resultType="java.util.Map">
        SELECT * FROM `quality_job_scheduling` WHERE crew_num = #{crewNum};
    </select>
    <update id="updateProductPeopleToRealTimeDate">
        <choose>
            <when test='crewNum == "1"'>
                UPDATE quality_monitoring_realtime_data1 SET produce_people = #{productPeople} WHERE produce_date = #{proDate} AND produce_time = #{produceTime}
            </when>
            <otherwise>
                UPDATE quality_monitoring_realtime_data2 SET produce_people = #{productPeople} WHERE produce_date = #{proDate} AND produce_time = #{produceTime}
            </otherwise>
        </choose>
    </update>
</mapper>